package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"

	"github.com/waseemofficial/GraphQL-Redis-MongoDB-Go/database/mongodb"
	"github.com/waseemofficial/GraphQL-Redis-MongoDB-Go/graph/model"
)

var db = mongodb.Connect()

// CreateStudent is the resolver for the createStudent field.
func (r *mutationResolver) CreateStudent(ctx context.Context, input *model.NewStudent) (*model.Student, error) {
	return db.Save(input), nil
}

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, input *model.NewClass) (*model.Classes, error) {
	panic(fmt.Errorf("not implemented: CreateClass - createClass"))
}

// CreateStaff is the resolver for the createStaff field.
func (r *mutationResolver) CreateStaff(ctx context.Context, input *model.NewStaff) (*model.Staff, error) {
	panic(fmt.Errorf("not implemented: CreateStaff - createStaff"))
}

// CreateSubject is the resolver for the createSubject field.
func (r *mutationResolver) CreateSubject(ctx context.Context, input *model.NewSubject) (*model.Subjects, error) {
	panic(fmt.Errorf("not implemented: CreateSubject - createSubject"))
}

// CreateParent is the resolver for the createParent field.
func (r *mutationResolver) CreateParent(ctx context.Context, input *model.NewParent) (*model.Parent, error) {
	panic(fmt.Errorf("not implemented: CreateParent - createParent"))
}

// CreateMarks is the resolver for the createMarks field.
func (r *mutationResolver) CreateMarks(ctx context.Context, input *model.NewMarks) (*model.Marks, error) {
	panic(fmt.Errorf("not implemented: CreateMarks - createMarks"))
}

// Parent is the resolver for the parent field.
func (r *queryResolver) Parent(ctx context.Context, id string) (*model.Parent, error) {
	panic(fmt.Errorf("not implemented: Parent - parent"))
}

// Student is the resolver for the student field.
func (r *queryResolver) Student(ctx context.Context, id string) (*model.Student, error) {
	return db.FindStudent(id), nil
}

// Students is the resolver for the students field.
func (r *queryResolver) Students(ctx context.Context) ([]*model.Student, error) {
	return db.AllStudents(), nil
}

// Staff is the resolver for the staff field.
func (r *queryResolver) Staff(ctx context.Context, id string) (*model.Staff, error) {
	panic(fmt.Errorf("not implemented: Staff - staff"))
}

// Class is the resolver for the class field.
func (r *queryResolver) Class(ctx context.Context, id string) (*model.Classes, error) {
	panic(fmt.Errorf("not implemented: Class - class"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
